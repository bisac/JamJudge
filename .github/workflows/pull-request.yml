name: Pull Request CI

on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  pull-requests: write

concurrency:
  group: pr-${{ github.event.pull_request.head.ref }}
  cancel-in-progress: true

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

  unit-test:
    name: Unit tests
    needs: lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests with coverage
        run: npm run test -- --coverage --coverage.provider=v8 --coverage.reporter=lcov
        env:
          CI: true

      - name: Upload unit coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-unit
          path: coverage
          if-no-files-found: warn

  e2e-test:
    name: E2E tests
    needs: lint
    runs-on: ubuntu-latest
    environment: integration
    env:
      ENVIRONMENT: integration
      CI: true
      # The webServer in playwright.config.ts already provides these, but we also surface
      # them here to be explicit (and in case config changes to read from env)
      VITE_FIREBASE_API_KEY: fake-api-key
      VITE_FIREBASE_AUTH_DOMAIN: localhost
      VITE_FIREBASE_PROJECT_ID: demo-test
      VITE_FIREBASE_STORAGE_BUCKET: demo-test.appspot.com
      VITE_FIREBASE_MESSAGING_SENDER_ID: '123456789'
      VITE_FIREBASE_APP_ID: '1:123456789:web:abcdef'
      # Collect V8 coverage for the Node test runner (Playwright). This does not
      # instrument the client app code, but provides test-runner coverage data.
      NODE_V8_COVERAGE: coverage-e2e
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup Java 21 (for Firebase Emulators)
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Install Playwright browsers (from playwright.config.ts)
        run: npx playwright install --with-deps chromium

      - name: Install Firebase CLI (for emulators)
        run: npm i -g firebase-tools

      - name: Run E2E tests with Firebase emulators
        run: npm run test:e2e

      - name: Upload Playwright HTML report
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report
          if-no-files-found: warn

      - name: Upload E2E coverage (V8) artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-e2e-v8
          path: coverage-e2e
          if-no-files-found: warn

  status-comment:
    name: PR status comment
    needs: [lint, unit-test, e2e-test]
    if: ${{ github.event_name == 'pull_request' && success() }}
    runs-on: ubuntu-latest
    steps:
      - name: Post status comment
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const runUrl = `${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`;
            const body = [
              'âœ… CI passed for this PR.',
              '',
              '- Lint: success',
              '- Unit tests: success (coverage uploaded as artifact "coverage-unit")',
              '- E2E tests: success (HTML report: "playwright-report", coverage: "coverage-e2e-v8")',
              '',
              `[View workflow run](${runUrl})`
            ].join('\n');

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body
            });


